{"version":3,"sources":["Components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","className","_","times","matches","num_of_groups","i","key","data","map","item","index","text_area","substring","match","start","end","groups","group","App","useState","setTextArea","regex_area","setRegexArea","setMatches","highlight","setHighlight","typing","setTyping","a","axios","post","resp","console","log","addText","e","preventDefault","target","name","value","debounce","useEffect","length","replace","text","includes","endsWith","RegExp","isValidRegex","askService","newHigh","onChange","containerClassName","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc342d09.chunk.js","sourcesContent":["import React from 'react';\r\nimport _ from \"lodash\";\r\n\r\n\r\n\r\nfunction Table(props) {\r\n\r\n  return (  \r\n    <div>\r\n        <table className=\"match-table\"> \r\n            <thead> \r\n                <tr>\r\n                    <th className=\"match-head\">match</th>\r\n                    {_.times(props.matches.num_of_groups, (i) => (\r\n                        <th className={`group${i+1}-head`} key={`groupstring${i}`}>group {i +1}</th>\r\n                    ))} \r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.matches.data.map((item, index)=>(\r\n                    <tr key={index}>\r\n                        <td>{props.text_area.substring(item.match.start, item.match.end)}</td>\r\n                        {item.groups.map((group,index)=>(\r\n                            <td key={`groupstart${group.start}end${group.end}index${index}`}>{props.text_area.substring(group.start, group.end)}</td>\r\n                        ))}\r\n                    </tr>\r\n                )\r\n            )\r\n            }   \r\n            </tbody>\r\n        </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Table from './Components/Table'\nimport { HighlightWithinTextarea } from 'react-highlight-within-textarea'\nimport _ from 'lodash'\n\n\n\n\nfunction App() {\n  const [text_area, setTextArea] = useState(\"\")\n  const [regex_area, setRegexArea] = useState(\"\")\n  const [matches, setMatches] = useState(null)\n  const [highlight, setHighlight] = useState([])\n  const [typing, setTyping] = useState(false)\n  //const [typingTimeout, setTypingTimeout] = useState(0)\n\n\n  function isValidRegex(text){\n    if (text.includes('[]'))\n      return false\n    if (text.endsWith('.*?') || text.endsWith('.*') || text.endsWith('|'))\n      return false\n    try{\n      new RegExp(text)\n    }\n    catch(e){\n      return false\n    }\n    return true\n  }\n\n  async function askService(data){\n    try{\n      const resp = await axios.post('http://localhost:8000/api/', data)\n      setMatches(resp.data)\n    }\n    catch(e){\n      console.log(e)\n    }\n  }\n\n\n  function addText(e){\n      e.preventDefault()\n      let {name, value} = e.target\n      switch(name){\n        case 'text-area':\n            setTyping(true)\n            setTextArea(value)\n            _.debounce(()=>setTyping(false),1000)()\n            break\n        case 'regex-area':\n            setTyping(true)\n            setRegexArea(value)\n            _.debounce(()=>setTyping(false),1000)()\n            break\n        default:\n            setRegexArea(\"\")\n            setTextArea(\"\")\n            break\n      }\n  }\n  useEffect(()=>{\n      if(text_area.length>1000){\n        setTextArea(text_area.replace(/\\s+$/, ''))\n      }\n      const data = {\n        regex_area,\n        text_area\n      }\n      if (text_area && regex_area && isValidRegex(regex_area) && !typing){\n          askService(data)\n      }\n      else{\n        if (!regex_area || !text_area){\n          setMatches(null)\n        }\n\n      }\n    },\n     [regex_area, text_area, typing])\n\n  useEffect(()=>{\n      if(matches){\n        if(matches.data.length>0 & matches.num_of_groups >1){\n          let newHigh = []\n          matches.data.map(item=>{\n            newHigh = [...newHigh,\n            {\n              highlight : [item.match.start, item.match.end],\n              className: 'match'\n            },\n            {\n              highlight : [item.groups[0].start, item.groups[0].end],\n              className : 'group1'\n            },\n            {\n              highlight : [item.groups[1].start, item.groups[1].end],\n              className : 'group2'\n            }\n           ]\n           return newHigh\n          }\n          )\n            setHighlight(newHigh)\n          }\n        else{\n          if(matches.data.length>0 & matches.num_of_groups ===1){\n            let newHigh = []\n            matches.data.map(item=>{\n              newHigh = [...newHigh,\n              {\n                highlight : [item.match.start, item.match.end],\n                className: 'match'\n              },\n              {\n                highlight : [item.groups[0].start, item.groups[0].end],\n                className : 'group1'\n              }\n             ]\n             return newHigh\n            }\n            )\n              setHighlight(newHigh)\n            }\n          else{\n              if(matches.data.length>0){\n                  let newHigh = []\n                  matches.data.map(item=>(\n                    newHigh = [...newHigh,\n                    {\n                      highlight : [item.match.start, item.match.end],\n                      className: 'match'\n                    }\n                   ]\n                    ))\n                    setHighlight(newHigh)\n                }\n              else{\n                setHighlight([])\n                }\n              } \n        }\n      \n      }\n      else{\n        setHighlight([])\n\n      }\n     \n    }\n    , [matches])\n\n\n  return (\n    \n    <>\n      <main className = \"main-container\">\n          <div>\n              <HighlightWithinTextarea\n              highlight = {highlight}\n              className = \"text-area\"\n              onChange = {addText}\n              value = {text_area}\n              name = \"text-area\"\n              containerClassName = \"text-area-container\"\n              />\n          </div>\n         \n         <div>\n            <textarea  className = \"regex-area\" onChange = {addText} value = {regex_area} name = \"regex-area\"/>\n            {matches  && matches.data.length && <Table matches = {matches} text_area = {text_area}/>}\n\n         </div>\n      </main>\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}